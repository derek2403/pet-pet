{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-1ebf38ea0706f69d35b24c841c293409453cfec2",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/PetFactory.sol": "project/contracts/PetFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Pet.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\n/**\r\n * @title Pet\r\n * @notice Individual pet contract that tracks all activities and interactions\r\n * @dev Each pet is deployed as a separate contract instance with its unique name\r\n */\r\ncontract Pet {\r\n    // Pet identity\r\n    string public petName;\r\n    address public owner;\r\n    uint256 public createdAt;\r\n\r\n    // Activity tracking\r\n    struct ActivityLog {\r\n        string activityType; // \"walk\", \"run\", \"rest\", \"eat\", \"drink\", \"interact\"\r\n        uint256 duration;    // in seconds for walk/run/rest, in grams for eat/drink\r\n        uint256 timestamp;\r\n        address interactedWith; // for interact events, stores other pet contract address\r\n        string metadata;     // optional: for future ZKP proof references\r\n    }\r\n\r\n    ActivityLog[] public activities;\r\n    \r\n    // Quick stats\r\n    uint256 public totalWalkTime;\r\n    uint256 public totalRunTime;\r\n    uint256 public totalRestTime;\r\n    uint256 public totalFoodConsumed;\r\n    uint256 public totalWaterConsumed;\r\n    uint256 public interactionCount;\r\n\r\n    // Events\r\n    event Walk(uint256 indexed activityId, uint256 duration, uint256 timestamp);\r\n    event Run(uint256 indexed activityId, uint256 duration, uint256 timestamp);\r\n    event Rest(uint256 indexed activityId, uint256 duration, uint256 timestamp);\r\n    event Eat(uint256 indexed activityId, uint256 amount, uint256 timestamp);\r\n    event Drink(uint256 indexed activityId, uint256 amount, uint256 timestamp);\r\n    event Interact(uint256 indexed activityId, address indexed otherPet, uint256 duration, uint256 timestamp);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Initialize the pet contract\r\n     * @param _petName The unique name of the pet\r\n     * @param _owner The address of the pet owner\r\n     */\r\n    constructor(string memory _petName, address _owner) {\r\n        require(bytes(_petName).length > 0, \"Pet name cannot be empty\");\r\n        require(_owner != address(0), \"Invalid owner address\");\r\n        \r\n        petName = _petName;\r\n        owner = _owner;\r\n        createdAt = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @notice Log a walk activity\r\n     * @param duration Duration of the walk in seconds\r\n     */\r\n    function walk(uint256 duration) external onlyOwner {\r\n        require(duration > 0, \"Duration must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"walk\",\r\n            duration: duration,\r\n            timestamp: block.timestamp,\r\n            interactedWith: address(0),\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        totalWalkTime += duration;\r\n        emit Walk(activityId, duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Log a run activity\r\n     * @param duration Duration of the run in seconds\r\n     */\r\n    function run(uint256 duration) external onlyOwner {\r\n        require(duration > 0, \"Duration must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"run\",\r\n            duration: duration,\r\n            timestamp: block.timestamp,\r\n            interactedWith: address(0),\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        totalRunTime += duration;\r\n        emit Run(activityId, duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Log a rest activity\r\n     * @param duration Duration of the rest in seconds\r\n     */\r\n    function rest(uint256 duration) external onlyOwner {\r\n        require(duration > 0, \"Duration must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"rest\",\r\n            duration: duration,\r\n            timestamp: block.timestamp,\r\n            interactedWith: address(0),\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        totalRestTime += duration;\r\n        emit Rest(activityId, duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Log eating activity\r\n     * @param amount Amount of food consumed in grams\r\n     */\r\n    function eat(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Amount must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"eat\",\r\n            duration: amount,\r\n            timestamp: block.timestamp,\r\n            interactedWith: address(0),\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        totalFoodConsumed += amount;\r\n        emit Eat(activityId, amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Log drinking activity\r\n     * @param amount Amount of water consumed in milliliters\r\n     */\r\n    function drink(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Amount must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"drink\",\r\n            duration: amount,\r\n            timestamp: block.timestamp,\r\n            interactedWith: address(0),\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        totalWaterConsumed += amount;\r\n        emit Drink(activityId, amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Log interaction with another pet\r\n     * @param otherPetContract Address of the other pet's contract\r\n     * @param duration Duration of interaction in seconds\r\n     */\r\n    function interact(address otherPetContract, uint256 duration) external onlyOwner {\r\n        require(otherPetContract != address(0), \"Invalid pet contract address\");\r\n        require(otherPetContract != address(this), \"Cannot interact with self\");\r\n        require(duration > 0, \"Duration must be positive\");\r\n        \r\n        uint256 activityId = activities.length;\r\n        activities.push(ActivityLog({\r\n            activityType: \"interact\",\r\n            duration: duration,\r\n            timestamp: block.timestamp,\r\n            interactedWith: otherPetContract,\r\n            metadata: \"\"\r\n        }));\r\n        \r\n        interactionCount++;\r\n        emit Interact(activityId, otherPetContract, duration, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Get total number of activities\r\n     * @return Total count of all logged activities\r\n     */\r\n    function getActivityCount() external view returns (uint256) {\r\n        return activities.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get activity details by ID\r\n     * @param activityId The ID of the activity to retrieve\r\n     * @return ActivityLog struct with all activity details\r\n     */\r\n    function getActivity(uint256 activityId) external view returns (ActivityLog memory) {\r\n        require(activityId < activities.length, \"Activity does not exist\");\r\n        return activities[activityId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all activities for this pet\r\n     * @return Array of all ActivityLog structs\r\n     */\r\n    function getAllActivities() external view returns (ActivityLog[] memory) {\r\n        return activities;\r\n    }\r\n\r\n    /**\r\n     * @notice Get summary stats for the pet\r\n     * @return walks Total walk time in seconds\r\n     * @return runs Total run time in seconds\r\n     * @return rests Total rest time in seconds\r\n     * @return food Total food consumed in grams\r\n     * @return water Total water consumed in ml\r\n     * @return interactions Total number of interactions\r\n     */\r\n    function getStats() external view returns (\r\n        uint256 walks,\r\n        uint256 runs,\r\n        uint256 rests,\r\n        uint256 food,\r\n        uint256 water,\r\n        uint256 interactions\r\n    ) {\r\n        return (\r\n            totalWalkTime,\r\n            totalRunTime,\r\n            totalRestTime,\r\n            totalFoodConsumed,\r\n            totalWaterConsumed,\r\n            interactionCount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer ownership of the pet\r\n     * @param newOwner Address of the new owner\r\n     */\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n"
      },
      "project/contracts/PetFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"./Pet.sol\";\r\n\r\n/**\r\n * @title PetFactory\r\n * @notice Factory contract for creating and managing Pet contracts\r\n * @dev Deploys individual Pet contracts and tracks all created pets\r\n */\r\ncontract PetFactory {\r\n    // Mapping from pet name (lowercase) to pet contract address\r\n    mapping(string => address) public petsByName;\r\n    \r\n    // Array of all deployed pet contracts\r\n    address[] public allPets;\r\n    \r\n    // Mapping from owner address to their pet contracts\r\n    mapping(address => address[]) public petsByOwner;\r\n    \r\n    // Events\r\n    event PetCreated(\r\n        string indexed petName,\r\n        address indexed petContract,\r\n        address indexed owner,\r\n        uint256 timestamp\r\n    );\r\n\r\n    /**\r\n     * @notice Create a new pet with the given name\r\n     * @param petName The unique name for the pet (case-insensitive)\r\n     * @return petContract The address of the newly deployed Pet contract\r\n     */\r\n    function addPet(string memory petName) external returns (address petContract) {\r\n        require(bytes(petName).length > 0, \"Pet name cannot be empty\");\r\n        require(bytes(petName).length <= 32, \"Pet name too long (max 32 characters)\");\r\n        \r\n        // Convert to lowercase for uniqueness check\r\n        string memory nameLower = _toLower(petName);\r\n        require(petsByName[nameLower] == address(0), \"Pet name already exists\");\r\n        \r\n        // Deploy new Pet contract\r\n        Pet newPet = new Pet(petName, msg.sender);\r\n        petContract = address(newPet);\r\n        \r\n        // Store references\r\n        petsByName[nameLower] = petContract;\r\n        allPets.push(petContract);\r\n        petsByOwner[msg.sender].push(petContract);\r\n        \r\n        emit PetCreated(petName, petContract, msg.sender, block.timestamp);\r\n        \r\n        return petContract;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a pet name is available\r\n     * @param petName The name to check\r\n     * @return available True if the name is available, false otherwise\r\n     */\r\n    function isPetNameAvailable(string memory petName) external view returns (bool available) {\r\n        string memory nameLower = _toLower(petName);\r\n        return petsByName[nameLower] == address(0);\r\n    }\r\n\r\n    /**\r\n     * @notice Get pet contract address by name\r\n     * @param petName The name of the pet\r\n     * @return petContract The address of the pet's contract (0x0 if not found)\r\n     */\r\n    function getPetByName(string memory petName) external view returns (address petContract) {\r\n        string memory nameLower = _toLower(petName);\r\n        return petsByName[nameLower];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all pets owned by a specific address\r\n     * @param owner The owner's address\r\n     * @return pets Array of pet contract addresses\r\n     */\r\n    function getPetsByOwner(address owner) external view returns (address[] memory pets) {\r\n        return petsByOwner[owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all deployed pet contracts\r\n     * @return pets Array of all pet contract addresses\r\n     */\r\n    function getAllPets() external view returns (address[] memory pets) {\r\n        return allPets;\r\n    }\r\n\r\n    /**\r\n     * @notice Get total number of pets created\r\n     * @return count Total number of pets\r\n     */\r\n    function getPetCount() external view returns (uint256 count) {\r\n        return allPets.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get detailed info about a pet by contract address\r\n     * @param petContract The pet contract address\r\n     * @return petName The name of the pet\r\n     * @return owner The owner's address\r\n     * @return createdAt Timestamp when pet was created\r\n     * @return activityCount Total number of activities logged\r\n     */\r\n    function getPetInfo(address petContract) external view returns (\r\n        string memory petName,\r\n        address owner,\r\n        uint256 createdAt,\r\n        uint256 activityCount\r\n    ) {\r\n        Pet pet = Pet(petContract);\r\n        return (\r\n            pet.petName(),\r\n            pet.owner(),\r\n            pet.createdAt(),\r\n            pet.getActivityCount()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to convert string to lowercase\r\n     * @param str Input string\r\n     * @return Lowercase version of the string\r\n     */\r\n    function _toLower(string memory str) internal pure returns (string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        bytes memory bLower = new bytes(bStr.length);\r\n        \r\n        for (uint256 i = 0; i < bStr.length; i++) {\r\n            // If uppercase character, convert to lowercase\r\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\r\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\r\n            } else {\r\n                bLower[i] = bStr[i];\r\n            }\r\n        }\r\n        \r\n        return string(bLower);\r\n    }\r\n}\r\n\r\n"
      }
    }
  }
}